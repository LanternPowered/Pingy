// Gradle plugins
buildscript {
    repositories {
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url = 'https://dl.bintray.com/lanternpowered/maven/'
        }
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath 'org.lanternpowered:lanterngradle:1.0.0'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    id "com.github.johnrengelman.shadow" version "1.2.3"
}

// Environment variables for the build set by the build server
ext {
    if (!project.hasProperty('artifactory_contextUrl')) artifactory_contextUrl = System.getenv('artifactory_contextUrl')
    if (!project.hasProperty('artifactory_username')) artifactory_username = System.getenv('artifactory_username')
    if (!project.hasProperty('artifactory_password')) artifactory_password = System.getenv('artifactory_password')
    buildNumber = System.env.BUILD_NUMBER ?: System.env.TRAVIS_BUILD_NUMBER ?: '0'
    ciSystem = System.env.CI_SYSTEM ?: (System.env.TRAVIS ? 'travis' : null)
    commit = System.env.GIT_COMMIT ?: System.env.TRAVIS_COMMIT
    branch = System.env.GIT_BRANCH ?: System.env.TRAVIS_BRANCH
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'org.lanternpowered.gradle'
apply plugin: 'org.lanternpowered.run-configs'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

group = 'org.lanternpowered'
archivesBaseName = project.name.toLowerCase()
version = '1.0.0-SNAPSHOT'

ext.runFolder = 'run'
ext.mainClass = 'org.lanternpowered.pingy.Pingy'

repositories {
	mavenCentral()
}

configurations {
    netty
    compile {
        extendsFrom netty
    }
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    netty group: 'io.netty', name: 'netty-all', version: '4.1.1.Final'
}

runConfigurations {
    theConfig {
        name = 'Pingy Server'
        mainClass = project.mainClass
        workingDirectory = 'run'
        programArguments = '--debug'
    }
}

jar {
    classifier = 'base'
    manifest {
        attributes(
                'Main-Class': mainClass
        )
    }
}

processResources {
    from 'LICENSE.txt'
}

// A separate task to generate the netty jar,
// doing this separate to avoid long wait times
// Run "nettyJar" to update the jar
task nettyJar(type: ShadowJar) {
    // The classifier
    classifier = 'netty'
    // Exclude empty directories
    includeEmptyDirs = false
    // Include all the netty classes into the process
    from zipTree(project.configurations.netty.first())
    // Include all the project files to check
    from sourceSets.main.output

    // Loop through the files and check for the files which
    // should be included in the final jar
    transform(DependencyClassTransformer) {
        // Check only the netty path for dependencies
        dependencyFiles.include 'io/netty/**'
        // Just scan all the pingy files
        filesToScan.include 'org/lanternpowered/pingy/**'
    }
}

// Sadly enough does the "overwrite: true" parameter not work,
// so this task will delete the jar before running nettyJar
task deleteNettyJar(type: Delete) {
    delete project.nettyJar.archivePath
}
nettyJar.dependsOn deleteNettyJar

shadowJar {
    dependsOn nettyJar

    // Empty classifier, this is the final jar
    classifier = ''
    // Exclude empty directories
    includeEmptyDirs = false

    // Make sure that the jar is generated
    afterEvaluate {
        // Include the netty classes
        from zipTree(project.nettyJar.archivePath)
    }

    dependencies {
        include dependency('com.google.code.gson:gson')
    }

    exclude 'LICENSE', 'NOTICE'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

assemble.dependsOn shadowJar
assemble.dependsOn sourceJar

if (artifactory_contextUrl && artifactory_username && artifactory_password) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    publishing {
        publications {
            thePublication(MavenPublication) {
                artifact shadowJar
                artifact sourceJar
                artifactId archivesBaseName
            }
        }
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = project.version.contains("SNAPSHOT") ? 'libs-snapshot-local' : 'libs-release-local'
                username = "${artifactory_username}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications('thePublication')
                publishArtifacts = true
            }
        }

        resolve {
            repository {
                repoKey = 'repo'
                username = "${artifactory_username}"
                password = "${artifactory_password}"
                maven = true
            }
        }
    }
    clientConfig.setIncludeEnvVars(true)
    clientConfig.info.setBuildNumber(buildNumber)
    if (ciSystem) clientConfig.info.addEnvironmentProperty('ci-system', ciSystem)
}

license {
    header rootProject.file('HEADER.txt')
    sourceSets = project.sourceSets
    include '**/*.java'

    strictCheck true
    ignoreFailures = false

    ext {
        name = project.name
        url = project.url
        organization = project.organization
    }

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}
